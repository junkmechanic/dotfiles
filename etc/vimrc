if &compatible
  set nocompatible
endif
filetype off
filetype plugin indent on
syntax on
let mapleader = ","
let maplocalleader = "`"
set pastetoggle=<F2>
set clipboard+=unnamedplus
set splitright
set splitbelow
set mouse=a
set bs=2
set wildmenu
set wildmode=full
set history=700
set undolevels=700
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set hlsearch
set incsearch
set ignorecase
set smartcase
set nobackup
set nowritebackup
set noswapfile
set updatetime=2000
set showbreak=â†ª
set number
set tw=80
set nowrap
set fo-=t
set completeopt=longest,menuone
set nofoldenable
set relativenumber
set t_Co=256
set colorcolumn=+1
hi ColorColumn ctermbg=235
color torte

nnoremap Y y$
nnoremap ; :
vnoremap ; :
nnoremap : ;
vnoremap : ;

" Python specific mapping
inoremap <Leader><C-J> <Esc>A:<Esc>o
nnoremap <Leader><C-J> A:<Esc>o

" Adding parameters to functions
nnoremap <leader>i i,<space>
nnoremap <leader>a a,<space>

" Open a new line and stay in Normal mode. (Gives a meaning to Enter as well)
" It has been reported that this might interfere with the command line normal
" mode. Since I havent faced any problems with it as yet, I dont mind keeping
" this mapping. In case, that ever needs to be done, possibly the expr should
" be used (see below for example) along with the modes that need to be
" excluded (check http://vimdoc.sourceforge.net/htmldoc/eval.html#mode())
"nnoremap <Leader><CR> O<Esc>
nnoremap <CR> o<Esc>

" Quicksave command
noremap <C-Z> :update<CR>
vnoremap <C-Z> <C-C>:update<CR>
inoremap <C-Z> <C-O>:update<CR>

" Paste the selected text after the last line of the selected text
" This is useful in the visual line mode
vnoremap <leader>p y`>p

" Delete to buffer 'd' instead of the default buffer
nnoremap <expr> <leader>dw (v:register == '+') ? '"ddw' : '"'.v:register.'dw'
nnoremap <expr> <leader>dd (v:register == '+') ? '"ddd' : '"'.v:register.'dd'
vnoremap <expr> <leader>d (v:register == '+') ? '"dd' : '"'.v:register.'d'

" Quick movements
nnoremap H ^
nnoremap L g_
vnoremap H ^
vnoremap L g_
nnoremap J 3j
nnoremap K 3k
vnoremap J 3j
vnoremap K 3k

" Quick quit command
noremap <Leader>e :quit<CR>
noremap <Leader>E :q!<CR>
noremap <Leader>q :qa<CR>
noremap <Leader>Q :qa!<CR>

" Bind Ctrl+<movement> keys to move around the windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h

" Now you can use Ctrl+w then h/j/k/l for shifting splits around
nnoremap <c-w>j <c-w>J
nnoremap <c-w>k <c-w>K
nnoremap <c-w>l <c-w>L
nnoremap <c-w>h <c-w>H

" Shift the rest of the line up or down
nnoremap <Leader>o Do<C-R>"<Esc>
nnoremap <Leader>O DO<C-R>"<Esc>

" Open all buffers as tabs
nnoremap <Leader>t :tab all<CR>

" Open all buffers as vertical splits
nnoremap <Leader>v :vert ba<CR>

" Jump to the next occurance of the character under the cursor
nnoremap <Leader>f yl:normal f<C-r>"<CR>

nnoremap <A-l> zl
nnoremap <A-h> zh<c-h>

nnoremap Q :normal n.<CR>

vnoremap < <gv
vnoremap > >gv

nmap gV `[v`]

map! <C-F> <Esc>gUiw`]a

" Save a file that has been openned without root permission and requires it
cnoremap w!! w !sudo tee > /dev/null %

" Swapping <c-p> with <up> in ex mode (and the companions)
cnoremap <c-p> <up>
cnoremap <up> <c-p>
cnoremap <c-n> <down>
cnoremap <down> <c-n>

" Tab navigation
nnoremap <Leader>n <esc>:tabprevious<CR>
nnoremap <Leader>m <esc>:tabnext<CR>

" Python toggle True/False
nnoremap <Leader><Leader>t ciwTrue<Esc>
nnoremap <Leader><Leader>f ciwFalse<Esc>

" Remove search highlighting
noremap <C-n> :nohl<CR>
vnoremap <C-n> :nohl<CR>

" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %

" Place the cursor at the same position that it was at before the previous exit
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

" Open help in a right vertical split
autocmd FileType help wincmd L

" Since the quickfix window is not modifiable, the global mapping for <CR>
" overwrites the default quickfix <CR> behaviour to jump to the specified
" line/buffer. So the following buffer local mapping would remap <CR> to behave
" as intended.
autocmd FileType qf silent! nnoremap <buffer> <CR> <CR>

" Quick exit from quickfix
autocmd FileType qf silent! nnoremap <buffer> q :q<CR>

" Format JSON files
au FileType json exe ":silent %! python -m json.tool"

" Format XML files
au FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"

" LaTex options
autocmd FileType plaintex set fo+=t
autocmd FileType plaintex set spell spelllang=en_us

" Navigation to the last visited tab
let g:lasttab = 1
nnoremap <leader>z :exec "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Replace the current 'word' (variable name) with the content of the defualt
" register and retain that in the default register.
function! PasteWithRetain(mode)
  if a:mode == 'n'
    normal! viw
  elseif a:mode == 'v'
    normal! gv
  endif
  if col(".") == col("$") - 1
    normal! "_dp
  else
    normal! "_dP
  endif
endfunction
nnoremap <localleader>p :call PasteWithRetain('n')<CR>
vnoremap <localleader>p :call PasteWithRetain('v')<CR>

" to wrap text, use ' :Wrap '
command! -nargs=* Wrap set wrap linebreak nolist

" Jump to the next or previous line that has the same level or a lower
" level of indentation than the current line.
"
" exclusive (bool)  :  true: Motion is exclusive
"                      false: Motion is inclusive
" fwd (bool)        :  true: Go to next line
"                      false: Go to previous line
" lowerlevel (bool) :  true: Go to line with lower indentation level
"                      false: Go to line with the same indentation level
" skipblanks (bool) :  true: Skip blank lines
"                      false: Don't skip blank lines
function! NextIndent(exclusive, fwd, lowerlevel, skipblanks)
  let line = line('.')
  let column = col('.')
  let lastline = line('$')
  let indent = indent(line)
  let stepvalue = a:fwd ? 1 : -1
  while (line > 0 && line <= lastline)
    let line = line + stepvalue
    if ( ! a:lowerlevel && indent(line) == indent ||
          \ a:lowerlevel && indent(line) < indent)
      if (! a:skipblanks || strlen(getline(line)) > 0)
        if (a:exclusive)
          let line = line - stepvalue
        endif
        exe line
        exe "normal " column . "|"
        return
      endif
    endif
  endwhile
endfunction

" Moving back and forth between lines of same or lower indentation.
nnoremap <silent> <leader>k :call NextIndent(0, 0, 0, 1)<CR>
nnoremap <silent> <leader>j :call NextIndent(0, 1, 0, 1)<CR>
vnoremap <silent> <leader>k <Esc>:call NextIndent(0, 0, 0, 1)<CR>m'gv''
vnoremap <silent> <leader>j <Esc>:call NextIndent(0, 1, 0, 1)<CR>m'gv''
onoremap <silent> <leader>k :call NextIndent(0, 0, 0, 1)<CR>
onoremap <silent> <leader>j :call NextIndent(0, 1, 0, 1)<CR>
