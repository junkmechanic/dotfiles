# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
    *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias bd='. bd -s'
alias catn='cat -n'
alias cd..='cd ..'
alias dmesg='dmesg -T'
alias duall='du -shc .[!.]* *'
alias gita='git add'
alias gitc='git commit'
alias gitd='git diff'
alias gitds='git diff --staged'
alias gitl='git log -1'
alias gitrso='git remote show origin'
alias gits='git status'
alias gitsbup='git submodule update --init --recursive --remote'
alias gt='cd $(git rev-parse --show-toplevel 2>/dev/null || (echo "."; echo "Not within a git repository" >&2))'
alias l='ls -CF'
alias la='ls -A'
alias ll='ls -AlhF'
alias mopidy='mopidy --save-debug-log'
alias mypubip='curl http://ipecho.net/plain ; echo'
alias pipgrep='pip freeze | grep'
alias psgrep='ps aux | grep -v grep | grep'
alias pti='ptipython'
alias rsync='rsync --human-readable --partial --progress --rsh=ssh'
alias sl='ls'
alias tmat='tmux attach'
alias tmgn='tmux new-session -s general'
alias tmnw='tmux new-session -s'
alias tmux='tmux -2'
alias vim='nvim'
alias vimo='vim -O'
alias vimp='vim -p'
alias xclip='xclip -selection clipboard'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# If neovim is installed, use that instead of vim
if type nvim > /dev/null 2>&1; then
    alias vim='nvim'
    alias vimdiff='nvim -d'
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi

# Add paths to $PATHS_TO_ADD instead of $PATH to avoid creating duplicates
PATHS_TO_ADD=$HOME/.local/bin
for new_path in ${PATHS_TO_ADD//:/ }; do
    case ":$PATH:" in
        *":$new_path:"*) :;;
        *) PATH="$new_path:$PATH" ;;
    esac
done

#####################################################################
# Functions without dependencies

# to view path in readable format
function path(){
    old=$IFS
    IFS=:
    printf "%s\n" $PATH
    IFS=$old
}

# This will create the directory passed and then change into it as well.
function mkcd {
    if [ ! -n "$1" ]; then
        echo "Enter a directory name"
    elif [ -d $1 ]; then
        echo "$1 already exists"
    else
        mkdir -p $1 && cd $1
    fi
}

# This is to swap the names of two files
function swap()
{
    if [ ! -z "$2" ] && [ -e "$1" ] && [ -e "$2" ] && ! [ "$1" -ef "$2" ] && (([ -f "$1" ] && [ -f "$2" ]) || ([ -d "$1" ] && [ -d "$2" ])) ; then
        tmp=$(mktemp -d $(dirname "$1")/XXXXXX)
        mv "$1" "$tmp" && mv "$2" "$1" &&  mv "$tmp"/"$1" "$2"
        rmdir "$tmp"
    else
        echo "Usage: swap file1 file2 or swap dir1 dir2"
    fi
}

# To find the latest modified file in a dir
# Usage: latest [dir]
latest() {
    local file latest;
    for file in "${1:-.}"/*;
    do [[ $file -nt $latest  ]] && latest=$file; done;
    printf '%s\n' "$latest";
}

# Number of files in a directory (only an estimate. subtract 3 for closer
# estimate. also hidden files and directories are included)
count (){ TMP_COUNT_LL=$(ls -AlhF $1 | wc -l); echo $(($TMP_COUNT_LL - 1)); }

function lgrep {
    if [[ $# -eq 2 ]]; then
        targetdir=$1
        pattern=$2
    elif [[ $# -eq 1 ]]; then
        pattern=$1
    else
        echo "Usage : lgrep [directory] pattern"
        return 1
    fi
    ls -alhF $targetdir | grep -i $pattern
}

function dpgrep {
    if [[ -z "$1" ]]; then
        read -e -p 'Pattern : ' pat
    else
        pat="$1"
    fi
    dpkg -l | egrep -i $pat
}

function flac2mp3 {
    parallel ffmpeg -i {} -qscale:a 0 {.}.mp3 ::: *.flac
}

function scpjtm {
    scp -r "$1" junktool:/sdcard/Music/
}

function remove_duplicates {
    awk '!a[$0]++' $1 >"$1.no_duplicates"
}

function dusort {
    if [[ -z "$1" ]]; then
        du_dir=.
    else
        du_dir=$1
    fi
    exec du -khxa -d 1 $du_dir | sort -h
}

# this will not auto-activate the same env once it has been manually
# deactivated.
# for dir structures with multiple .venv files, if navigating to a dir that
# shares the same env as its parent, a reference to the parent will be stored to
# avoid activation when jumping back to the parent.
function venv_prompt {
    if [[ -e .venv ]]; then
        if [[ "$PWD" != "$OLD_VENV_PWD" ]]; then
            if [[ ! -z $VIRTUAL_ENV && $(cat .venv) = $(basename $VIRTUAL_ENV) ]]; then
                # echo "Already in $(basename $VIRTUAL_ENV)"
                return
            fi
            OLD_VENV_PWD=$PWD
            echo "Activating $(cat .venv)"
            workon `cat .venv`
        fi
    fi
}

set_title() { printf '\e]2;%s\a' "$*"; }

__git_cmd__() {
    printf "git "$@""
}
bind '"\ez": " \C-e\C-u`__git_cmd__ diff`\e\C-e\er\C-m"'
bind '"\es": " \C-e\C-u`__git_cmd__ status`\e\C-e\er\C-m"'

#####################################################################
# Setting variables, sourcing scripts etc

# Launch tmux automatically and attach to the 'general' session
if which tmux 2>&1 >/dev/null; then
    # if not inside a tmux session, and if no session is started, start a new
    # session
    test -z "$TMUX" && (tmux attach || tmux new-session -s general)
fi

# virtualenvwrapper settings
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/devbench
source /home/ankur/.local/bin/virtualenvwrapper.sh

# Use vim as the PAGER for programs like man.
export MANPAGER="/bin/sh -c \"unset MANPAGER;col -b -x | \
    vim -R \
    -c 'set ft=man nomod noma nolist' \
    -c 'map q :q<CR>' \
    -c 'map <SPACE> <C-D>' \
    -c 'map f <C-D>' \
    -c 'map b <C-U>' \
    -c 'nmap K :Man <C-R>=expand(\\\"<cword>\\\")<CR><CR>' -\""

shopt -s autocd cdspell

# activating pip completion
eval "`pip completion --bash`"

# adding powerline
. /home/ankur/.local/bin/powerline_binding_bash.sh

# Don't freeze the terminal man!
if [[ ! -z "$PS1" ]]; then
    stty -ixon
fi

# auto-activation of virtualenv
export PROMPT_COMMAND="$PROMPT_COMMAND venv_prompt"

source ~/.fzf.bash
# Custom functions
# Alt+h to enter dir with home as root for fzf search
__fzf_cd_home__() {
    local dir
    dir=$(command \find -L /home/ankur/ -type d -print 2> /dev/null | $(__fzfcmd) +m) && printf 'cd %q' "$dir"
}
bind '"\eh": " \C-e\C-u`__fzf_cd_home__`\e\C-e\er\C-m"'

# Alt+e to edit a file/dir with the current dir as root for fzf search
__fzf_edit__() {
    local dir
    dir=$(command \find ./ -print 2> /dev/null | $(__fzfcmd) +m) && printf 'vim %q' "$dir"
}
bind '"\ee": " \C-e\C-u`__fzf_edit__`\e\C-e\er\C-m"'

# Alt+a to edit a file/dir with home as root for fzf search
__fzf_edit_home__() {
    local dir
    dir=$(command \find /home/ankur/ -print 2> /dev/null | $(__fzfcmd) +m) && printf 'vim %q' "$dir"
}
bind '"\ea": " \C-e\C-u`__fzf_edit_home__`\e\C-e\er\C-m"'

# Alt+u to edit a file/dir with root as root for fzf search
__fzf_edit_root__() {
    local dir
    dir=$(command \find / -print 2> /dev/null | $(__fzfcmd) +m) && printf 'vim %q' "$dir"
}
bind '"\eu": " \C-e\C-u`__fzf_edit_root__`\e\C-e\er\C-m"'

# Browse git commits with fzf
fshow() {
    git log --graph --color=always \
        --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index \
        --bind "ctrl-m:execute:
               (grep -o '[a-f0-9]\{7\}' | head -1 |
               xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
               {}
FZF-EOF"
}

# PLEASE MAKE SURE THIS IS THE LAST LINE IN THIS FILE
source ~/.local/bin/acd_func.sh
