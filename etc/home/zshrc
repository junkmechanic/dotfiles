# The following lines were added by compinstall

zstyle ':completion:*' auto-description 'Specify : %d'
zstyle ':completion:*' completer _expand _complete _ignored _correct
zstyle ':completion:*' completions 1
zstyle ':completion:*' format 'Completing : %d'
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %l \(%p\): Hit TAB for more, or the character to insert%s
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' '+r:|[.]=** r:|=**'
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' substitute 1
zstyle ':completion:*' verbose true
zstyle :compinstall filename '/home/ankur/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=10000
setopt appendhistory autocd nomatch notify sharehistory histignorealldups
unsetopt beep extendedglob
bindkey -e
# End of lines configured by zsh-newuser-install

# Setting LS_OPTIONS if possible
if [[ -a /usr/bin/dircolors ]] then
    eval `dircolors`
fi

# More completions
setopt menu_complete
zstyle ':completion:*' menu select

# Accept completion and also execute the command
zmodload zsh/complist
bindkey -M menuselect '^M' .accept-line
bindkey -M menuselect '^f' accept-line

# shift-tab for reverse menu completion
zmodload zsh/complist
bindkey '^[[Z' reverse-menu-complete

# rsync host completion
zstyle -s ':completion:*:hosts' hosts _ssh_config
[[ -r ~/.ssh/config ]] && _ssh_config+=($(cat ~/.ssh/config | sed -ne 's/Host[=\t ]//p'))
zstyle ':completion:*:hosts' hosts $_ssh_config

# Aliases
alias cd..='cd ..'
alias duall='du -shc .[!.]* *'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias gita='git add'
alias gitc='git commit'
alias gitd='git diff'
alias gitds='git diff --staged'
alias gitl='git log -1'
alias gitrso='git remote show origin'
alias gits='git status'
alias gitsbup='git submodule update --init --recursive --remote'
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias gt='cd $(git rev-parse --show-toplevel 2>/dev/null || (echo "."; echo "Not within a git repository" >&2))'
alias l='ls'
alias ll='ls -AlhF'
alias ls='ls --color=auto'
alias pipgrep='pip freeze | grep'
alias psgrep='ps aux | grep -v grep | grep'
alias pti='ptipython'
alias rsync='rsync --human-readable --partial --progress --rsh=ssh'
alias sl='ls --color=auto'
alias tmat='tmux attach'
alias tmgn='tmux new-session -s general'
alias vim='nvim'
alias vimdiff='nvim -d'
alias vimo='nvim -O'
alias vimp='nvim -p'
# Neovim Remote Activation
if [ -n "${NVIM_LISTEN_ADDRESS}" ]; then
  alias vims='nvr -o'
  alias vimv='nvr -O'
  alias vimt='nvr --remote-tab'
fi

# update PATH
# this goes into ~/.zshenv
# and also it should be set in ~/.zprofile on arch
# src : https://wiki.archlinux.org/index.php/zsh#Configuring_.24PATH
# export PATH=~/.local/bin:~/bin:$PATH

# update fpath
fpath=( "$HOME/.zsh/zfunctions" $fpath )

# locale
export LC_ALL="en_US.UTF-8"

# spaceship prompt
# ln -s ~/.zsh/plugins/spaceship-prompt/spaceship.zsh ~/.zsh/zfunctions/prompt_spaceship_setup
autoload -U promptinit; promptinit
prompt spaceship
# spaceship prompt settings
SPACESHIP_EXIT_CODE_SHOW=true
SPACESHIP_TIME_SHOW=true
SPACESHIP_USER_PREFIX=' '
SPACESHIP_HOST_PREFIX=' '
SPACESHIP_DIR_PREFIX=' '
SPACESHIP_TIME_COLOR=blue
SPACESHIP_USER_COLOR=blue
SPACESHIP_HOST_COLOR_SSH=cyan
SPACESHIP_CHAR_COLOR_SUCCESS=blue

# open man pages with neovim
export MANPAGER="nvim -c 'set ft=man' -"

# virtualenvwrapper
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/devbench
source ~/.local/bin/virtualenvwrapper.sh

# sudo command shortcut
sudo-command-line() {
    [[ -z $BUFFER ]] && zle up-history
    if [[ $BUFFER == sudo\ * ]]; then
        LBUFFER="${LBUFFER#sudo }"
    elif [[ $BUFFER == $EDITOR\ * ]]; then
        LBUFFER="${LBUFFER#$EDITOR }"
        LBUFFER="sudoedit $LBUFFER"
    elif [[ $BUFFER == sudoedit\ * ]]; then
        LBUFFER="${LBUFFER#sudoedit }"
        LBUFFER="$EDITOR $LBUFFER"
    else
        LBUFFER="sudo $LBUFFER"
    fi
}
zle -N sudo-command-line
# Defined shortcut keys: [Esc] [Esc]
bindkey "\e\e" sudo-command-line

# delete one word at a time
backward-kill-dir () {
    local WORDCHARS=${WORDCHARS/\/}
    zle backward-kill-word
}
zle -N backward-kill-dir
bindkey '^[^?' backward-kill-dir
# autoload -U select-word-style
# select-word-style bash

# custom sources
#source "$HOME/.local/bin/powerline_binding_zsh.zsh"
# git@github.com:zsh-users/zsh-autosuggestions
source "$HOME/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
# git@github.com:zsh-users/zsh-history-substring-search.git
source "$HOME/.zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh"
# git@github.com:hlissner/zsh-autopair.git
source "$HOME/.zsh/plugins/zsh-autopair/autopair.zsh"
# git@github.com:psprint/zsh-navigation-tools.git
source "$HOME/.zsh/plugins/zsh-navigation-tools/zsh-navigation-tools.plugin.zsh"

# Syntax Highlighting
# git@github.com:zsh-users/zsh-syntax-highlighting.git
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
source ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# history substring search keybindings
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down

# accept and execute the current suggestion with ctrl+space
bindkey '^ ' autosuggest-execute

# keybindings for zsh-navigation-tools
zle -N znt-cd-widget
bindkey '^[w' znt-cd-widget
znt_cd_hotlist=(
    ~/devbench
    ~/.files
    ~/downloads
    ~/.config/znt
)

# git@github.com:junegunn/fzf.git
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# zle custom functions

function _git_status {
    zle kill-whole-line
    git status
    zle accept-line
}
zle -N _git_status
bindkey '\es' _git_status

function _git_diff {
    zle kill-whole-line
    git diff
    zle accept-line
}
zle -N _git_diff
bindkey '\ez' _git_diff

fzf-cd-home-widget() {
  local cmd="${FZF_ALT_C_COMMAND:-"command find -L ~/ -type d -print 2> /dev/null"}"
  setopt localoptions pipefail 2> /dev/null
  cd "${$(eval "$cmd | $(__fzfcmd) +m $FZF_ALT_C_OPTS"):-.}"
  local ret=$?
  zle reset-prompt
  typeset -f zle-line-init >/dev/null && zle zle-line-init
  return $ret
}
zle     -N    fzf-cd-home-widget
bindkey '\eh' fzf-cd-home-widget

# custom functions

# git commit browser
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

dusort() {
    if [[ -z "$1" ]]; then
        du_dir=.
    else
        du_dir=$1
    fi
    exec du -khxa -d 1 $du_dir | sort -h
}

lgrep() {
    if [[ $# -eq 2 ]]; then
        targetdir=$1
        pattern=$2
    elif [[ $# -eq 1 ]]; then
        pattern=$1
    else
        echo "Usage : lgrep [directory] pattern"
        return 1
    fi
    ls -alhF $targetdir | grep -i $pattern
}

dpgrep() {
    if [[ -z "$1" ]]; then
        read "pat?Pattern : "
    else
        pat="$1"
    fi
    dpkg -l | egrep -i "$pat"
}

# to view path in readable format
path() {
    # old=$IFS
    local IFS=:
    pth=($=PATH)
    printf "%s\n" $pth
    # IFS=$old
}

# This will create the directory passed and then change into it as well.
mkcd() {
    if [ ! -n "$1" ]; then
        echo "Enter a directory name"
    elif [ -d $1 ]; then
        echo "$1 already exists"
    else
        mkdir -p $1 && cd $1
    fi
}

remove_duplicates() {
    awk '!a[$0]++' $1 >"$1.no_duplicates"
}

# disable freezing the terminal
stty -ixon
