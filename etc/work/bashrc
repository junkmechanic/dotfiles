# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# Adding ~/.local/bin to PATH (for powerline presently)
PATH=$PATH:$HOME/.local/bin

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias bd='. bd -s'
alias cat='cat -n'
alias cd..='cd ..'
alias dmesg='dmesg -T'
alias dpgrep='dpkg -l | grep'
alias gita='git add'
alias gitc='git commit'
alias gitd='git diff'
alias gitl='git log -1'
alias gitrso='git remote show origin'
alias gits='git status'
alias gitsbup='git submodule update --init --recursive'
alias gt='cd $(git rev-parse --show-toplevel 2>/dev/null || (echo "."; echo "Not within a git repository" >&2))'
alias l='ls -CF'
alias la='ls -A'
alias lgrep='ll | grep'
alias ll='ls -alhF'
alias mopidy='mopidy --save-debug-log'
alias mypubip='curl http://ipecho.net/plain ; echo'
alias pipgrep='pip freeze | grep'
alias psgrep='ps aux | grep'
alias rsync='rsync --partial --progress --rsh=ssh'
alias sl='ls'
alias tmux='tmux -2'
alias vimo='vim -O'
alias vimp='vim -p'
alias xclip='xclip -selection clipboard'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#####################################################################

# to view path in readable format
function path(){
    old=$IFS
    IFS=:
    printf "%s\n" $PATH
    IFS=$old
}

# adding powerline
. /home/ankur/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh

# virtualenvwrapper settings
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/devbench
source /home/ankur/.local/bin/virtualenvwrapper.sh

# This will create the directory passed and then change into it as well.
function mkcd {
  if [ ! -n "$1" ]; then
    echo "Enter a directory name"
  elif [ -d $1 ]; then
    echo "$1 already exists"
  else
    mkdir -p $1 && cd $1
  fi
}

# This is to swap the names of two files
function swap()
{
  if [ ! -z "$2" ] && [ -e "$1" ] && [ -e "$2" ] && ! [ "$1" -ef "$2" ] && (([ -f "$1" ] && [ -f "$2" ]) || ([ -d "$1" ] && [ -d "$2" ])) ; then
    tmp=$(mktemp -d $(dirname "$1")/XXXXXX)
    mv "$1" "$tmp" && mv "$2" "$1" &&  mv "$tmp"/"$1" "$2"
    rmdir "$tmp"
  else
    echo "Usage: swap file1 file2 or swap dir1 dir2"
  fi
}

# To find the latest modified file in a dir
# Usage: latest [dir]
latest() {
    local file latest;
    for file in "${1:-.}"/*;
    do [[ $file -nt $latest  ]] && latest=$file; done;
    printf '%s\n' "$latest";
}

# Number of files in a directory (only an estimate. subtract 3 for closer
# estimate. also hidden files and directories are included)
count (){ TMP_COUNT_LL=$(ll | wc -l); echo $(($TMP_COUNT_LL - 3)); }

set_title() { printf '\e]2;%s\a' "$*"; }

shopt -s autocd cdspell

source ~/bin/bd-completion

source ~/.fzf.bash

source ~/bin/acd_func.sh

# Launch tmux automatically and attach to the 'general' session
# Using 'exec' replaces the shell with the given command. This is done so that
# detaching from tmux will exit the terminal session automatically.
# But this will make going back to bash (normal non-tmux terminal) impossible,
# that I have found to be quite problematic, specially for ssh-ing to external
# hosts or when trying to open terminal in a particular dir from file manager.
# So this has been removed from this core rc and will be invoked separately
# from a different terminator profile.
#if [[ -z $TMUX ]] && [[ $- = *i* ]]; then
#    #tmux attach-session -t general || tmux attach || tmux; exit;
#    exec tmux -2 attach-session -t general || exec tmux -2 attach || exec tmux -2
#fi
