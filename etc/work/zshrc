# If you come from bash you might have to change your $PATH.
export PATH=$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/Users/ankurkhanna/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# Keep zsh-syntax-highlighting as the last plugin
plugins=(git docker colorize kubectl mosh pip sudo \
    history-substring-search zsh-navigation-tools zsh-autopair \
    zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# Setting zsh options
setopt menu_complete

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi
export EDITOR='nvim'

# use neovim as MANPAGER
export MANPAGER="nvim -c 'set ft=man' -"

# set highlighters
export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Prevent zsh from erroring out when it doesnt find any matches for globs
# This is a permanet solution. For a more refined solution use aliases for the
# specific commands that you dont want zsh to glob through
unsetopt nomatch

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias catn="cat -n"
alias cd..="cd .."
alias duall="du -shc .[!.]* *"
alias gita="git add"
alias gita.="git add ."
alias gitc="git commit"
alias gitd="git diff"
alias gitds="git diff --staged"
alias gitl="git log -1"
alias gitrso="git remote show origin"
alias gits="git status"
alias gitsbup="git submodule update --init --recursive --remote"
alias gt='cd $(git rev-parse --show-toplevel 2>/dev/null || (echo "."; echo "Not within a git repository" >&2))'
alias ll="ls -AlhF"
alias pipgrep="pip freeze | grep"
alias psgrep="ps aux | grep -v grep | grep"
alias pti="ptipython"
alias rsync="noglob rsync --human-readable --partial --progress --rsh=ssh"
alias s3cmd='noglob s3cmd'
alias scp='noglob scp'
alias sl="ls"
alias tmat="tmux attach"
alias tmgn="tmux new-session -s general"
alias tmnw="tmux new-session -s"
alias tmux="tmux -2"
alias vim="nvim"
alias vimdiff='nvim -d'
alias vimo="nvim -O"
alias vimp="nvim -p"
alias wget='noglob wget'
# Neovim Remote Activation
if [ -n "${NVIM_LISTEN_ADDRESS}" ]; then
  alias vims='nvr -o'
  alias vimv='nvr -O'
  alias vimt='nvr --remote-tab'
fi

# keybindings for history-substring-search
# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# keybindings for zsh-navigation-tools
zle -N znt-cd-widget
bindkey '^[w' znt-cd-widget
znt_cd_hotlist=(
    ~/devbench
    ~/.files
    ~/Downloads
    ~/.config/znt
)

# accept and execute the current suggestion with ctrl+space
bindkey '^ ' autosuggest-execute

# virtualenvwrapper settings
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/devbench
VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3
source ~/Library/Python/3.7/bin/virtualenvwrapper.sh

# to view path in readable format
path() {
    # old=$IFS
    local IFS=:
    pth=($=PATH)
    printf "%s\n" $pth
    # IFS=$old
}

# This will create the directory passed and then change into it as well.
mkcd() {
    if [ ! -n "$1" ]; then
        echo "Enter a directory name"
    elif [ -d $1 ]; then
        echo "$1 already exists"
    else
        mkdir -p $1 && cd $1
    fi
}

# zle custom functions

function _git_status {
    zle kill-whole-line
    git status
    zle accept-line
}
zle -N _git_status
bindkey '\es' _git_status

function _git_diff {
    zle kill-whole-line
    git diff
    zle accept-line
}
zle -N _git_diff
bindkey '\ez' _git_diff

# fzf configuration. All other zsh config goes before this line
# git@github.com:junegunn/fzf.git
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# git commit browser
function _git_log {
  git rev-parse HEAD > /dev/null 2>&1 || return

  local _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
  local _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always %'"
  local _viewGitLogLineShort="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always --stat %'"

  git log --graph --color=always \
    --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@" |
  fzf --no-sort --reverse --tiebreak=index --no-multi \
    --ansi --preview="$_viewGitLogLineShort" --preview-window=down \
    --bind "enter:execute:$_viewGitLogLine | less -R && print $_gitLogLineToHash"
}

function _git_log_zsh_wrapper {
    zle kill-whole-line
    _git_log
    zle accept-line
}
zle -N _git_log_zsh_wrapper
bindkey '\ea' _git_log_zsh_wrapper

# edit a file under the current dir tree
ve() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --preview '
    [[ $(file --mime {}) =~ binary ]] && echo {} is a binary file ||
    (highlight -O ansi -l {} || cat {}) 2> /dev/null | head -100'))
  [[ -n "$files" ]] && vim -- "${files[@]}"
}

# open after searching pattern in the file
vg() {
  local file
  local line

  read -r file line <<<"$(grep -irn $@ . | fzf | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
     vim $file +$line
     print $file at $line
  fi
}
