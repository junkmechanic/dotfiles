# If you come from bash you might have to change your $PATH.
export PATH=$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="spaceship"

SPACESHIP_PROMPT_ORDER=(
  time          # Time stamps section
  user          # Username section
  dir           # Current directory section
  host          # Hostname section
  git           # Git section (git_branch + git_status)
  pyenv         # Pyenv section
  kubectl       # Kubectl context section
  terraform     # Terraform workspace section
  exec_time     # Execution time
  line_sep      # Line break
  vi_mode       # Vi-mode indicator
  jobs          # Background jobs indicator
  exit_code     # Exit code section
  char          # Prompt character
)
SPACESHIP_TIME_SHOW=true
SPACESHIP_TIME_COLOR="blue"
SPACESHIP_PROMPT_PREFIXES_SHOW=false
SPACESHIP_PYENV_COLOR="blue"
SPACESHIP_PYENV_SYMBOL=" "
SPACESHIP_CHAR_SYMBOL="❯ "

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# forgit settings
forgit_clean=gclf
forgit_checkout_branch=gcbf

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# Keep zsh-syntax-highlighting as the last plugin
plugins=(git gitfast docker colorize kubectl mosh pip ssh-agent sudo aws \
    history-substring-search zsh-navigation-tools zsh-autopair pyenv forgit \
    git-extras \
    # add plugins above this line
    zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting )

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# Setting zsh options
setopt menu_complete

# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi
export EDITOR='nvim'

# use neovim as MANPAGER
export MANPAGER="nvim +Man!"

# set highlighters
export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Prevent zsh from erroring out when it doesnt find any matches for globs
# This is a permanet solution. For a more refined solution use aliases for the
# specific commands that you dont want zsh to glob through
unsetopt nomatch

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

alias catn="cat -n"
alias cd..="cd .."
alias duall="du -shc .[!.]* *"
alias ga.="git add ."
alias gitrpo="git remote prune origin"
alias gitrso="git remote show origin"
alias gt='cd $(git rev-parse --show-toplevel 2>/dev/null || (echo "."; echo "Not within a git repository" >&2))'
alias ll="ls -AlhF"
alias pipgrep="pip freeze | grep"
alias psgrep="ps aux | grep -v grep | grep"
alias rsync="noglob rsync --human-readable --partial --progress --rsh=ssh"
alias scp="noglob scp"
alias sl="ls"
alias tmat="tmux attach"
alias tree1="tree -L 1"
alias treed="tree -d"
alias tmgn="tmux new-session -s SYS"
alias vim="nvim"
alias vimdiff="nvim -d"
alias vims="nvim -o"
alias vimv="nvim -O"
alias vimt="nvim -p"
alias wget="noglob wget"
alias wr-data="awsExec wr-data"
alias wr-dev="awsExec wr-dev"

# Neovim Remote Activation
if [ -n "${NVIM_LISTEN_ADDRESS}" ]; then
  alias vims='nvr -o'
  alias vimv='nvr -O'
  alias vim='nvr --remote-tab'
fi

# keybindings for history-substring-search
# bind P and N for EMACS mode
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
# bind k and j for VI mode
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# keybindings for zsh-navigation-tools
# removing binding for znt-history-widget as fzf is used for this
bindkey -r '^[r'
zle -N znt-cd-widget
bindkey '^[w' znt-cd-widget
znt_cd_hotlist=(
    ~/devbench
    ~/.files
    ~/Downloads
    ~/devbench/main
    ~/devbench/main/data-graph
    ~/devbench/main/data-fraud
    ~/devbench/main/data-products/fraud-detection
    ~/devbench/main/data-ml-experiment-analysis
    ~/devbench/main/data-ml-pipelines
    ~/devbench/main/streaming
    ~/devbench/random/
)

# accept and execute the current suggestion with ctrl+space
bindkey '^ ' autosuggest-execute

# ruby (brew version)
export PATH="/usr/local/opt/ruby/bin:$PATH"
export LDFLAGS="-L/usr/local/opt/ruby/lib"
export CPPFLAGS="-I/usr/local/opt/ruby/include"

export DEVDIR="$HOME/devbench"
export FRDDIR="$HOME/devbench/fraud"

eval "$(pyenv init --path)"
eval "$(pyenv virtualenv-init -)"
source $(pyenv root)/completions/pyenv.zsh
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

# if not using sdk-man, set java version
export JAVA_HOME=`/usr/libexec/java_home -v 11.0`

# bat config
export BAT_THEME="Nord"

# k8s completion
[[ $commands[kubectl] ]] && source <(kubectl completion zsh)

# collate k8s contexts [Start]
collate_k8s_context() {
    DEFAULT_KUBE_CONTEXTS="$HOME/.kube/config"
    if test -f "${DEFAULT_KUBE_CONTEXTS}"
    then
    export KUBECONFIG="$DEFAULT_KUBE_CONTEXTS"
    fi

    CUSTOM_KUBE_CONTEXTS="$HOME/.kube/custom-contexts"
    mkdir -p "${CUSTOM_KUBE_CONTEXTS}"

    OIFS="$IFS"
    IFS=$'\n'
    for contextFile in `find "${CUSTOM_KUBE_CONTEXTS}" -type f -name "*.yaml"`
    do
        export KUBECONFIG="$contextFile:$KUBECONFIG"
    done
    IFS="$OIFS"
}
collate_k8s_context

# to view path in readable format
path() {
    # old=$IFS
    local IFS=:
    pth=($=PATH)
    printf "%s\n" $pth
    # IFS=$old
}

# zle custom functions

function _git_status_zle {
    zle kill-whole-line
    git status
    zle accept-line
}
zle -N _git_status_zle
bindkey '\es' _git_status_zle

function _git_diff_zle {
    zle kill-whole-line
    git diff
    zle accept-line
}
zle -N _git_diff_zle
bindkey '\ez' _git_diff_zle

# fzf configuration
# git@github.com:junegunn/fzf.git
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# git commit browser
function _git_log_zle {
  git rev-parse HEAD > /dev/null 2>&1 || return

  local _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
  local _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always %'"
  local _viewGitLogLineShort="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always --stat %'"

  git log --graph --color=always \
    --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@" |
  fzf --no-sort --reverse --tiebreak=index --no-multi \
    --ansi --preview="$_viewGitLogLineShort" --preview-window=down \
    --bind "enter:execute:$_viewGitLogLine | less -R && print $_gitLogLineToHash"
}

function _git_log_zsh_wrapper {
    zle kill-whole-line
    _git_log_zle
    zle accept-line
}
zle -N _git_log_zsh_wrapper
bindkey '\ea' _git_log_zsh_wrapper

# command history search
__fzfcmd() {
  [ -n "$TMUX_PANE" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "$FZF_TMUX_OPTS" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzf"
}

fzf-history-widget() {
  local selected num
  setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
  selected=( $(fc -rl 1 | perl -ne 'print if !$seen{($_ =~ s/^\s*[0-9]+\s+//r)}++' |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
  local ret=$?
  if [ -n "$selected" ]; then
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
    fi
  fi
  zle reset-prompt
  return $ret
}
zle     -N   fzf-history-widget
bindkey '^R' fzf-history-widget

# edit a file under the current dir tree
ve() {
  local files
  local IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --preview '
    [[ $(file --mime {}) =~ binary ]] && echo {} is a binary file ||
    (highlight -O ansi -l {} || cat {}) 2> /dev/null | head -100' \
    --bind 'ctrl-n:page-down,ctrl-p:page-up,alt-j:preview-page-down,alt-k:preview-page-up'))
  [[ -n "$files" ]] && vim -- "${files[@]}"
  print "$files"
}

# open after searching pattern in the file
vg() {
  local file
  local line

  read -r file line <<<"$(ag --nobreak --noheading --nocolor $@ . | \
      fzf-tmux --bind 'ctrl-n:page-down,ctrl-p:page-up' | \
      awk -F: '{print $1, $2}')"

  if [[ -n "$file" ]]
  then
     vim "$file" +"$line"
     print "$file" at "$line"
  fi
}

# change to directory under the given or current directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf-tmux +m) &&
  cd "$dir"
}

# homebrew with fzf
bip() {
    local to_install=$( { brew formulae; brew casks; } | \
        fzf-tmux ${FZF_DEFAULT_OPTS} \
        -m --header='[brew:search]' --preview 'brew info {}')

    if [[ $to_install ]]; then
        for prog in $(echo $to_install)
        do
            echo "Installing $prog"
            brew install $prog && brew upgrade $prog
        done
    fi
}

# aws-okta wrapper
awsExec() {
  local profile="$1"
  shift

  if [[ -n "${DEBUG}" ]]; then
      aws-okta --debug exec "${profile}" -- $@
  else
      aws-okta exec "${profile}" -- $@
  fi
}

# clean python cache files
pyclean() {
    find . | \
        grep -E "(__pycache__|\.pyc$)" | \
        xargs rm -rf
}

kubectlgetall() {
  for i in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
    echo "Resource:" $i
    kubectl -n ${1} get --ignore-not-found ${i}
  done
}

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
