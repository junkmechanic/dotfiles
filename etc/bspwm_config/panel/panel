#! /bin/bash

. panel_config
. panel_icons
. panel_colors

if [ $(pgrep -cx panel) -gt 1 ] ; then
	printf "%s\n" "The panel is already running." >&2
exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

bspc config -m "$(xrandr | grep primary | cut -d' ' -f1)" top_padding $(expr $PANEL_HEIGHT + $top_pad)
bspc subscribe > "$PANEL_FIFO" &
xtitle -sf 'TTL%s' > "$PANEL_FIFO" &

clock_format='%H:%M'
date_format="%a %d %B"

# Clock
while true; do
  echo "CLK$(icon $ICON_CLOCK)  %{F$COLOR_DESK_BACK}$(date +"$clock_format")%{F-}"
  sleep $REFRESH_CLOCK
done > "$PANEL_FIFO" &

# Date
while true; do
  echo "DTE$(icon $ICON_DATE)  %{F$COLOR_DESK_BACK}$(date +"$date_format")%{F-}"
  sleep $REFRESH_DATE
done > "$PANEL_FIFO" &

# wifi
while true; do
    WIFI_SIGNAL=$(iw "$WIFI_INTERFACE" link 2>/dev/null | grep 'signal' | sed 's/signal: //' | sed 's/ dBm//' | sed 's/\t//')
    CONNECTION=$(curl -s --max-time 2 -I http://google.com | sed 's/^[^ ]*  *\([0-9]\).*/\1/; 1q')
	if [[ $(iw "$WIFI_INTERFACE" link 2>/dev/null) != "Not connected." ]]; then
        if [[ $CONNECTION -ne 2 && $CONNECTION -ne 3 ]]; then
            wifi_icon=$ICON_WIFI_NO_CON
		elif [[ $WIFI_SIGNAL -ge -67 ]]; then
			wifi_icon=$ICON_WIFI_HIGH
		elif [[ $WIFI_SIGNAL -ge -70 && $WIFI_SIGNAL -lt -67 ]]; then
			wifi_icon=$ICON_WIFI_MID
		# elif [[ $WIFI_SIGNAL -ge -80 && $WIFI_SIGNAL -lt -70 ]]; then
        else
			wifi_icon=$ICON_WIFI_LOW
		fi
	else
		wifi_icon=$ICON_WIFI_NONE
	fi
    echo -e "NET$(icon $wifi_icon)"
    sleep $REFRESH_WIFI
done > "$PANEL_FIFO" &

# Network Download Speed
while true; do
  rx_bytes=$(cat /sys/class/net/wlan0/statistics/rx_bytes)
  if [[ -z $prev_rx ]]; then
    prev_rx=$rx_bytes
    continue
  fi
  rx_kb=$(echo "scale=0; ($rx_bytes - $prev_rx) / 1024" | bc)
  if [[ $rx_kb -lt 5 ]]; then
    dspeed="RXB "
  elif [[ $rx_kb -ge 1024 ]]; then
    rx_mb=$(echo "scale=2; $rx_kb/1024" | bc)
    dspeed="RXB$(icon $ICON_NET_DOWN) %{F$COLOR_DESK_BACK}${rx_mb}MB%{F-} "
  else
    dspeed="RXB$(icon $ICON_NET_DOWN) %{F$COLOR_DESK_BACK}${rx_kb}KB%{F-} "
  fi
  echo -e "$dspeed"
  prev_rx=$rx_bytes
  sleep $REFRESH_NET_SPEED
done > "$PANEL_FIFO" &

# Network Upload Speed
while true; do
  tx_bytes=$(cat /sys/class/net/wlan0/statistics/tx_bytes)
  if [[ -z $prev_tx ]]; then
    prev_tx=$tx_bytes
    continue
  fi
  tx_kb=$(echo "scale=0; ($tx_bytes - $prev_tx) / 1024" | bc)
  if [[ $tx_kb -lt 5 ]]; then
    uspeed="TXB "
  elif [[ $tx_kb -ge 1024 ]]; then
    tx_mb=$(echo "scale=2; $tx_kb/1024" | bc)
    uspeed="TXB$(icon $ICON_NET_UP) %{F$COLOR_DESK_BACK}${tx_mb}MB%{F-} "
  else
    uspeed="TXB$(icon $ICON_NET_UP) %{F$COLOR_DESK_BACK}${tx_kb}KB%{F-} "
  fi
  echo -e "$uspeed"
  prev_tx=$tx_bytes
  sleep $REFRESH_NET_SPEED
done > "$PANEL_FIFO" &

# Volume
while true; do
  # Not quering pulse because it uses a hell lot of CPU
  state=$(amixer get Master | grep 'Mono: Playback' | grep '\[on]')
  volume=$(amixer -D default get Master | grep 'Mono: Playback' | grep -o '...%' | sed 's/\[//' | sed 's/%//' | sed 's/ //')
  if [[ $state ]]; then
    if [[ $volume -ge 50 ]]; then
      vicon=$ICON_VOLUME
    elif [[ $volume -gt 0 ]] && [[ $volume -lt 50 ]]; then
      vicon=$ICON_VOLUME_LOW
    else
      vicon=$ICON_VOLUME_LOW
    fi
  else
    vicon=$ICON_MUTE
  fi
  echo -e "VOL$(icon $vicon)  %{F$COLOR_DESK_BACK}$volume%{F-} "
  sleep $REFRESH_VOLUME
done > "$PANEL_FIFO" &

# Battery percentage and time until full charge/discharge
while true; do
  info=$(acpi -b)
  # output should be something like:
  #   Battery 0: Discharging, 73%, 03:25:35 remaining
  # On Full Charge, it changes to:
  #   Battery 0: Full, 100%
  state=$(echo $info | awk ' { print $3 }' | sed 's/.$//')
  batlvl=$(echo $info | awk ' { print $4 }' | sed -r 's/%,?$//')
  if [[ $state == "Charging" || $state == "Full" ]]; then
    baticon=$ICON_BATTERY_CHARGING
  elif [[ $batlvl -ge 50 ]]; then
    baticon=$ICON_BATTERY_FULL
  elif [[ $batlvl -lt 50 && $batlvl -ge 20 ]]; then
    baticon=$ICON_BATTERY_HALF
  else
    baticon=$ICON_BATTERY_EMPTY
  fi
  echo "BAT$(icon $baticon)  %{F$COLOR_DESK_BACK}$batlvl%{F-} "
  sleep $REFRESH_BATTERY
done > "$PANEL_FIFO" &

cat "$PANEL_FIFO" | panel_bar | \
    lemonbar -d \
    -n "$PANEL_WM_NAME" \
    -g "$BAR_GEOMETRY" \
    -f "$PANEL_FONT_FAMILY" -f "$PANEL_ICON_FONT_FAMILY" -f "$PANEL_DESK_ICON_FONT"\
    -F "$COLOR_FOREGROUND" -B "$COLOR_BACKGROUND" -U "$COLOR_UNDERLINE" \
    -a 30 -u 5| bash &

wait
